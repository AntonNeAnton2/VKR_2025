// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x8c, 0xf9, 0x8a, 0x91, 0xd4, 0x8d, 0xce, 0xbc, 0xc4, 0x38, 0x2f, 0x5c, 0xb9, 0x85, 0x2e, 0x22, 0x54, 0x4, 0x2c, 0x7a, 0x18, 0x60, 0x61, 0x36, 0xb8, 0x55, 0xc4, 0x2f, 0xca, 0x1, 0xe9, 0xcb, 0x9e, 0x13, 0x2e, 0xc6, 0xeb, 0x39, 0xa2, 0x77, 0x3c, 0x9a, 0xbc, 0xaf, 0xd, 0xba, 0x64, 0x5e, 0x9b, 0x22, 0x3, 0xfe, 0x82, 0xcc, 0x92, 0x3a, 0xb, 0x22, 0x40, 0x86, 0x6, 0xb6, 0x9f, 0x72
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xb4, 0xc1, 0xbe, 0xa6, 0xb5, 0xbe, 0xf8, 0xde, 0xa7, 0xf, 0x4e, 0x65, 0x89, 0xe1, 0x1c, 0x44, 0x30, 0x3c, 0x49, 0x4f, 0x21, 0x53, 0x59, 0x52, 0x8b, 0x6d, 0xf6, 0x4c, 0xac, 0x33, 0xda, 0xfd, 0xfc, 0x22, 0x4c, 0xa5, 0xda, 0x1, 0x9a, 0x15, 0xe, 0xf8, 0xd9, 0xca, 0x6c, 0x8e, 0x54, 0x3d, 0xa3, 0x1b, 0x31, 0x9b, 0xb1, 0xaf, 0xf4, 0x3, 0x32, 0x16, 0x21, 0xbf, 0x36, 0x84, 0xaf, 0x11, 0xef, 0x9b, 0xbd, 0xa0, 0xb5, 0xe9, 0xaa, 0x85, 0xfd, 0xd, 0x4e, 0x3e, 0xdf, 0xb0, 0x1f, 0x13, 0x37, 0x31, 0x48, 0x1c, 0x7a, 0x4, 0, 0x57, 0xda, 0x66, 0xa2, 0x1c, 0xfc, 0x38, 0xdb, 0xfb, 0xa6, 0x24, 0x16, 0xf1, 0xdc, 0x5f, 0x95, 0x4e, 0x9, 0xa3, 0xd9, 0x98, 0x35, 0x8a, 0x56, 0x66, 0xaf, 0x1b, 0x66, 0x9b, 0xe6, 0xad, 0xa0, 0xf, 0x3b, 0x14, 0x21, 0xe5, 0x34, 0xd3, 0xfb, 0x42
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "8847a36bc7a90d2fd8e5938d382cf236b1bc188b2beea40c892e3cf994a9020ccb71add995abf511c5dfbdaab3f3692087877f7959e7802849eeda2506ac2ed0")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xe6, 0xc1, 0xee, 0xa3, 0x86, 0xfc, 0xaf, 0xd7, 0x94, 0xe, 0x68, 0x1b, 0xe9, 0xf3, 0x40, 0x4a, 0x35, 0x4b, 0x46, 0x39, 0x59, 0x22, 0x55, 0x5b, 0xd1, 0x3b, 0xb3, 0x5f, 0xbf, 0x48, 0x82, 0xfd, 0xff, 0x7b, 0x6a, 0xf1, 0x98, 0x78, 0xd4, 0x6, 0x5d, 0xad, 0xf9, 0xfe, 0x61, 0xdb, 0x33, 0x2d, 0xf9, 0x49, 0x6a, 0x9f, 0xc1, 0xfb, 0xe6, 0x72, 0x33, 0x50, 0x17, 0xcb, 0x49, 0xf3, 0xf8, 0x1a, 0xe6, 0x8b, 0xe0, 0xde, 0xbf, 0xd4, 0x80, 0xfd, 0x9e, 0x7f, 0x16, 0x5, 0xf6, 0xb0, 0x18, 0x40, 0x10, 0x5e, 0x63, 0x4f, 0x2a, 0x21, 0x5c, 0xb
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "j8d2RqakP6GGPvnhaOjCAB4minwpuIk6ahD7sAvqa7EQlaWsbkiaC7tH8rWMOEghjrjOkYNAZG9YO56bDZO52A==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xb9, 0x9c, 0xe9, 0xf4, 0xb6, 0xbd, 0xf9, 0x8a, 0xe9, 0xb, 0x4c, 0x64, 0xda, 0xa8, 0x1a, 0x10, 0x60, 0x37, 0x1, 0x42, 0x7b, 0x56, 0x57, 0x1b, 0x8c, 0x62, 0xf3, 0x19, 0xa8, 0x64, 0xdc, 0xad, 0xaa, 0x22, 0x16, 0xa2
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "5eceb076-3c8c-4243-8c66-4776be5f418d")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xf8, 0x8b, 0xff, 0xf4
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xea, 0x98, 0xe6, 0xe2, 0xb1
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xb8, 0xcb
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xfe, 0x9c, 0xeb, 0xfd, 0x8b, 0xa9, 0xa2, 0xd5, 0xa9, 0x67, 0x5c, 0x34, 0xd8, 0xe1, 0x57
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
