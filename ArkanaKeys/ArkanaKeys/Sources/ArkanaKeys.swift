// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x8c, 0xf9, 0x8a, 0x91, 0xd4, 0x8d, 0xce, 0xbc, 0xc4, 0x38, 0x2f, 0x5c, 0xb9, 0x85, 0x2e, 0x22, 0x54, 0x4, 0x2c, 0x7a, 0x18, 0x60, 0x61, 0x36, 0xb8, 0x55, 0xc4, 0x2f, 0xca, 0x1, 0xe9, 0xcb, 0x9e, 0x13, 0x2e, 0xc6, 0xeb, 0x39, 0xa2, 0x77, 0x3c, 0x9a, 0xbc, 0xaf, 0xd, 0xba, 0x64, 0x5e, 0x9b, 0x22, 0x3, 0xfe, 0x82, 0xcc, 0x92, 0x3a, 0xb, 0x22, 0x40, 0x86, 0x6, 0xb6, 0x9f, 0x72
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let allianceApiTokenPublicKey: String = {
            let encoded: [UInt8] = [
                0xa1, 0xd4, 0xa7, 0xbc, 0xf9, 0xcf, 0x8b, 0xfb, 0x8d, 0x76, 0xf, 0xe, 0xea, 0xc4, 0xe, 0x72, 0x1, 0x46, 0x60, 0x33, 0x5b, 0x40, 0x2a, 0x73, 0xe1, 0x78, 0xe9, 0x2, 0xe7, 0xb, 0xa4, 0x82, 0xd7, 0x51, 0x6d, 0xa1, 0xa0, 0x7a, 0xe3, 0x26, 0x79, 0xdb, 0x8a, 0xdb, 0x40, 0xf9, 0x2c, 0xc, 0xae, 0x13, 0x3a, 0xae, 0xb0, 0xa9, 0xe1, 0x79, 0x7f, 0x64, 0x27, 0xd1, 0x6c, 0xff, 0xe8, 0x31, 0xc4, 0x9f, 0xe3, 0xf2, 0x9a, 0xdd, 0x98, 0x84, 0x8f, 0x61, 0x44, 0x2a, 0xd3, 0xf1, 0x5a, 0x41, 0x1a, 0x52, 0x47, 0x23, 0x7d, 0x1a, 0x15, 0xe, 0xe2, 0x30, 0x8d, 0x5b, 0xf3, 0x79, 0xe3, 0xbb, 0xe4, 0x55, 0x67, 0xf2, 0x87, 0x4c, 0xd2, 0x1f, 0xf, 0xdd, 0xcd, 0x9c, 0x43, 0xf3, 0x2, 0xd, 0xff, 0x6f, 0x70, 0xb2, 0xc6, 0x8e, 0xf5, 0x5b, 0x39, 0x69, 0x6, 0xe7, 0x6b, 0xe5, 0xa8, 0x1b, 0xba, 0xbd, 0xd3, 0xa8, 0xe5, 0xc6, 0x80, 0xfb, 0xac, 0x6c, 0x66, 0x28, 0xfa, 0xd4, 0x16, 0x66, 0x6, 0x4b, 0x6e, 0x55, 0x50, 0x1a, 0x2e, 0x57, 0xcb, 0x36, 0xf6, 0x7b, 0xb0, 0x38, 0xa8, 0xc1, 0xf6, 0x7a, 0x47, 0x8b, 0xd8, 0x56, 0x9a, 0x45, 0x4c, 0xf2, 0xed, 0xc2, 0x4c, 0x82, 0x52, 0x9, 0xd0, 0x46, 0x2c, 0xce, 0xf4, 0x82, 0xdb, 0x42, 0x7d, 0x73, 0x77, 0xf6, 0x6d, 0xec, 0xee, 0x25, 0xce, 0x9f, 0xd0, 0xc3, 0x86, 0xa2, 0xaa, 0xce, 0xa5, 0x5a, 0x6e, 0x39, 0xef, 0xef, 0x64, 0xd, 0x18, 0x62, 0x19, 0xd, 0x42, 0x56, 0x14, 0x5b, 0x89, 0x21, 0xb2, 0x1d, 0xbe, 0x70, 0x8c, 0xf9, 0x94, 0x3c, 0x5f, 0xb5, 0xbc, 0x5c, 0x95, 0x21, 0xe, 0xf0, 0xe8, 0xc4, 0x3f, 0xed, 0x8, 0x3d, 0xe9, 0x52, 0x6d, 0xb9, 0xf1, 0x8a, 0xf0, 0x40, 0x45, 0x4f, 0x31, 0xc9, 0x73, 0xe4, 0xb0, 0x1f, 0xdd, 0xae, 0xec, 0xc7, 0x9f, 0xe8, 0x98, 0xd1, 0xb7, 0x61, 0x61, 0x65, 0xf3, 0xc0, 0x62, 0x61, 0x6d, 0x68, 0x47, 0x4c, 0x6b, 0x38, 0x33, 0x75, 0xe1, 0x5, 0x8f, 0x1e, 0xe5, 0x72, 0xa8, 0xa0, 0xdd, 0x19, 0x19, 0xf6, 0xa1, 0x9, 0x89, 0x1a, 0x54, 0xd2, 0xff, 0xfd, 0x59, 0xf1, 0x5, 0x10, 0xda, 0x14, 0x3a, 0xb8, 0xb3, 0xbc, 0xa5, 0x56, 0x3b, 0x66, 0xd, 0xd0, 0x34, 0xf8, 0xf5, 0x4b, 0xfe, 0x97, 0xba, 0xa9, 0xe4, 0xfa, 0xfc, 0xc5, 0x90, 0x17, 0x41, 0x38, 0xce, 0xe1, 0x5d, 0x63, 0x21, 0x2f, 0x66, 0x1d, 0x2a, 0x13, 0x15, 0x5, 0xcf, 0x6c, 0xbc, 0x1a, 0xb9, 0x6d, 0x86, 0x82, 0xaf, 0x2b, 0x24, 0xac, 0xb2, 0xe, 0xfa, 0x22, 0x5d, 0xd1, 0xd1, 0xc5, 0x79, 0xc3, 0x8, 0x1d, 0xd3, 0x40, 0x69, 0xb0, 0xad, 0x87, 0xf0, 0x6b, 0x5d, 0x6c, 0x1, 0xcf, 0x71, 0xfa, 0xa6, 0x3f, 0xb4, 0x9d, 0xd3, 0xa7, 0xa3, 0xc4, 0x8a, 0xfd, 0x95, 0x79, 0x6d, 0x56, 0x94, 0xa8, 0x3, 0xf, 0x79, 0x41, 0x62, 0x3e, 0x38, 0x32, 0x32, 0x77, 0x98, 0x5, 0x91, 0x6d, 0x86, 0x48, 0xaa, 0xeb, 0xd5, 0x56, 0x77, 0xeb, 0xc6, 0x14, 0x8f, 0x5a
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let allianceApiTokenPassphrase: String = {
            let encoded: [UInt8] = [
                0xcd, 0xb4, 0xc7, 0xdc, 0x99, 0xcc
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let glassfyApiKey: String = {
            let encoded: [UInt8] = [
                0xb9, 0xcf, 0xee, 0xf7, 0xe2, 0xbb, 0xf8, 0xdf, 0xa0, 0x5c, 0x4d, 0x68, 0x8d, 0xb6, 0x4b, 0x17, 0x6d, 0x31, 0x1b, 0x4e, 0x79, 0x5, 0x4, 0xf, 0xdc, 0x33, 0xf7, 0x1c, 0xfe, 0x39, 0xda, 0xaa
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}
public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
